<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby

# short for escape_snippet - escapes special snippet characters in str
def es(str)
	str.to_s.gsub(/([$`\\])/, "\\\\\\1")
end


# given a string, insert an open parenthesis in the first, best
# spot starting from the end
def insert_open(str)	
	# this needs to be done as a state machine so we can properly jump
	# paren groups
	prev = nil
	cur = nil
	closuredepth = 0
	(str.length - 1).downto(0) do |i|
		prev = cur
		cur = str[i].chr()
		
		if prev != nil
			if prev == '('
				closuredepth -= 1
			elsif prev == ')'
				closuredepth += 1
			end
			
			# look for the start of a token next to a boundary
			if closuredepth == 0 and "#{cur}#{prev}" =~ /(\b|\s)[a-zA-Z0-9\(]$/
				return str[0..i] + '(' + str[i+1..-1]
			end
		end
	end
	
	# if we bailed, check for start of str positioning
	if str =~ /^[a-zA-Z0-9\(]/
		return '(' + str
	else
		return str	
	end
end


line = $stdin.read()
index = ENV['TM_LINE_INDEX'].to_i()
currentchar = line[index - 1].chr()

if currentchar == ')'
	# backtrack to find the open of this paren
	depth = 1
	searchline = line[0..(index - 2)].reverse
	searchline.split(//).each_index() do |i|
		ch = searchline[i].chr()
		if ch == ')'
			depth += 1
		elsif ch == '('
			depth -= 1
		end

		# at a depth of zero we should be sitting on the opening paren
		if depth == 0
			parenindex = [(index - 3 - i), 0].max()
			firstpart = line[0].chr()
			if parenindex &gt; 0
				firstpart = insert_open(line[0..parenindex])
			end
			if firstpart == line[0..parenindex]
				line = es(line[0..(index)]) + '$0' + es(line[(index + 1)..-1])
				break
			end
			
			secondpart = es(line[(parenindex + 2)..(index - 2)]) + ')$0' + es(line[index..-1])
			line = es(firstpart) + secondpart
			break
		end
	end
else
	line = es(insert_open(line[0..(index - 1)])) + ')$0' + es(line[index..-1])
end

print "#{line}"
</string>
	<key>fallbackInput</key>
	<string>line</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>@)</string>
	<key>name</key>
	<string>Extend Current Parens</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source</string>
	<key>uuid</key>
	<string>775D0733-3804-463C-A0EF-65B2998F5CE1</string>
</dict>
</plist>
